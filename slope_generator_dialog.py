# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SlopeGeneratorDialog
                                 A QGIS plugin
 Plugin for generate slope sing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-10-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by santerr80
        email                : santerr80@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QDialog
# --- 1. ДОБАВЬТЕ ЭТОТ ИМПОРТ ---
from qgis.core import QgsMapLayerProxyModel 
from qgis.core import QgsProject, QgsGeometryGeneratorSymbolLayer, QgsSymbol, QgsLineSymbol
# Импортируем словарь с выражениями
from .slope_expressions import EXPRESSIONS

# Этот путь должен указывать на ваш .ui файл
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'slope_generator_dialog_base.ui'))

class SlopeGeneratorDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SlopeGeneratorDialog, self).__init__(parent)
        self.setupUi(self)

        # Связываем выбор слоя с обновлением списка полей
        self.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.LineLayer)
        
        # Связываем выбор слоя с обновлением списка полей
        self.mMapLayerComboBox.layerChanged.connect(self.mFieldComboBox.setLayer)
        
        # Заполняем ComboBox типами откосов из словаря
        self.comboBoxSlopeType.addItems(EXPRESSIONS.keys())
        
        # Подключаем кнопку "Применить" к функции применения стиля
        self.pushButtonApply.clicked.connect(self.apply_style)
        
        # Подключаем кнопку "Отмена" к закрытию окна
        self.pushButtonCancel.clicked.connect(self.close)


    def apply_style(self):
        # Получаем выбранный слой
        layer = self.mMapLayerComboBox.currentLayer()
        if not layer:
            self.iface.messageBar().pushMessage("Ошибка", "Слой не выбран", level=1)
            return
            
        # Получаем имя поля с ID откоса
        slope_id_field = self.mFieldComboBox.currentField()
        if not slope_id_field:
            self.iface.messageBar().pushMessage("Ошибка", "Поле для ID откоса не выбрано", level=1)
            return

        # Получаем выбранный тип откоса и соответствующее ему выражение
        slope_type = self.comboBoxSlopeType.currentText()
        expression_template = EXPRESSIONS.get(slope_type)

        # Заменяем в шаблоне выражения плейсхолдер 'SLOPE_ID' на имя выбранного поля
        final_expression = expression_template.replace("'SLOPE_ID'", f"'{slope_id_field}'")
        
        # --- Создание и применение стиля ---
        
        # Создаем новый слой-символ типа "Генератор геометрии"
        geometry_generator = QgsGeometryGeneratorSymbolLayer()
        geometry_generator.setGeometryExpression(final_expression)
        geometry_generator.setSymbolType(QgsSymbol.Line) # Указываем, что будем рисовать линии

        # Внутри генератора геометрии создаем простой линейный символ (черная линия)
        simple_line = QgsLineSymbol.createSimple({'color': '0,0,0,255', 'width': '0.26'})
        geometry_generator.setSubSymbol(simple_line)

        # Создаем главный символ и удаляем в нем стандартный слой-символ
        symbol = QgsSymbol.defaultSymbol(layer.geometryType())
        symbol.deleteSymbolLayer(0)

        # Добавляем наш настроенный генератор геометрии
        symbol.appendSymbolLayer(geometry_generator)
        
        # Создаем новый отрисовщик (renderer) для слоя
        renderer = layer.renderer().clone()
        renderer.setSymbol(symbol)
        
        # Применяем новый отрисовщик к слою
        layer.setRenderer(renderer)
        
        # Обновляем отображение слоя на карте
        layer.triggerRepaint()
        self.iface.layerTreeView().refreshLayerSymbology(layer.id())

        self.iface.messageBar().pushMessage("Успех", f"Стиль '{slope_type}' применен к слою '{layer.name()}'", level=0)
        
        # Закрываем диалоговое окно после применения
        self.close()
